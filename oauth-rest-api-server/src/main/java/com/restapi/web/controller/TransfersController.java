package com.restapi.web.controller;

import com.restapi.web.dto.Transfer;
import com.restapi.web.repository.TransferRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.apache.commons.lang3.RandomStringUtils.randomNumeric;

@Controller
public class TransfersController {

    @Autowired
    // Which is auto-generated by Spring, we will use it to handle the data
    private TransferRepository transferRepository;

    public TransfersController() {
        super();
    }

    // API - read
    @PreAuthorize("#oauth2.hasScope('read')")
    @RequestMapping(method = RequestMethod.GET, value = "/transfers/{id}")
    @ResponseBody
    public Transfer findById(@PathVariable final long id) {
        return new Transfer(Long.parseLong(randomNumeric(10)), "MerchantTx" + randomNumeric(2));
    }

    // API - read
    @PreAuthorize("#oauth2.hasScope('read')")
    @RequestMapping(method = RequestMethod.GET, value = "/transfers")
    @ResponseBody
    public Map<String, List<Transfer>> getTransfers() {
        Map<String, List<Transfer>> map = new HashMap<>();
        List<Transfer> transfers = (List<Transfer>) transferRepository.findAll();
        map.put("transfers", transfers);
        return map;
    }

    // API - write
    @PreAuthorize("#oauth2.hasScope('write')")
    @RequestMapping(method = RequestMethod.POST, value = "/deposits")
    @ResponseStatus(HttpStatus.CREATED)
    @ResponseBody
    public Transfer deposit(@RequestParam String usage, @RequestParam BigDecimal amount, @RequestParam String currency,
                            @RequestParam String source_wallet_id, @RequestParam String return_success_url,
                            @RequestParam String return_failure_url, @RequestParam String status, @RequestParam String date) {
        Transfer transfer = new Transfer();

        transfer.setUnique_id(Long.parseLong(randomNumeric(10)));
        transfer.setTransaction_id("MerchantTx" + randomNumeric(2));
        transfer.setUsage(usage);
        transfer.setAmount(amount);
        transfer.setCurrency(currency);
        transfer.setSource_wallet_id(source_wallet_id);
        transfer.setReturn_success_url(return_success_url);
        transfer.setReturn_failure_url(return_failure_url);
        transfer.setStatus(status);
        transfer.setDate(date);

        transferRepository.save(transfer);

        return transfer;
    }
}
